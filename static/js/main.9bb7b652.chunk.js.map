{"version":3,"sources":["PanelComponent/Components/Card.jsx","PanelComponent/Components/CardList.jsx","PanelComponent/Components/ErrorBoundary.jsx","PanelComponent/Components/SearchBox.jsx","PanelComponent/Components/Scroll.jsx","PanelComponent/App.jsx","serviceWorker.js","index.jsx"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardArray","map","robot","key","console","log","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","SearchBox","onSearchFieldChange","type","placeholder","onChange","Scroll","style","overflowY","height","App","originalRobots","searchField","bind","fetch","then","response","json","users","e","searchValue","target","value","toLowerCase","newRobots","String","length","filter","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"2OAmCeA,EATF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,GAAhB,OACT,yBAAKC,UAAU,oDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,0BACpD,6BACI,4BAAKL,GACL,2BAAIC,MCRDK,EARE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAYD,EAAOE,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAMR,GAAIA,GAAIQ,EAAMR,GAAID,MAAOS,EAAMT,MAAOD,KAAMU,EAAMV,UAIzG,OAFAY,QAAQC,IAAIN,GAEL,6BAAMC,ICMFM,E,kDAvBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,UAAU,GAJC,E,8DAQDC,EAAOC,GACrBC,KAAKC,SAAS,CACVJ,UAAU,M,+BAKd,OAAIG,KAAKJ,MAAMC,SACJ,yDAGJG,KAAKL,MAAMO,a,GApBEC,aCUbC,EAVG,SAAC,GAAD,IAAGC,EAAH,EAAGA,oBAAH,OACd,yBAAKtB,UAAU,OACX,2BACIA,UAAU,mCACVuB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCDPI,EALA,SAAC,GAAD,IAAGP,EAAH,EAAGA,SAAH,OACX,yBAAKQ,MAAO,CAACC,UAAW,SAAUC,OAAQ,wBACrCV,ICgEMW,G,wDA5DX,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IAEDmB,eAAiB,GACtB,EAAKlB,MAAQ,CACTT,OAAQ,GACR4B,YAAa,IAGjB,EAAKV,oBAAsB,EAAKA,oBAAoBW,KAAzB,gBATZ,E,gEAYE,IAAD,OAChBC,MAAM,8CACLC,MAAK,SAAAC,GAEF,OADA3B,QAAQC,IAAI0B,GACLA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKP,eAAiBO,EACtB,EAAKpB,SAAS,CAAEd,OAAQkC,OAE5B7B,QAAQC,IAAI,sBAAuBO,KAAKc,kB,0CAGxBQ,GAChB,IAAMC,EAAcD,EAAEE,OAAOC,MAAMC,cAC/BC,EAAY3B,KAAKc,gBACO,kBAAjBS,GAA6BA,aAAuBK,UACvDL,EAAYM,OAAS7B,KAAKJ,MAAMmB,YAAYc,SAC5CF,EAAY3B,KAAKJ,MAAMT,QAEvBoC,EAAYM,OAAS,IACrBF,EAAYA,EAAUG,QAAO,SAAAxC,GAAK,OAAIA,EAAMV,KAAK8C,cAAcK,SAASR,QAGhFvB,KAAKC,SAAS,CACVd,OAAQwC,EACRZ,YAAaQ,M,+BAKjB,OAA4B,IAAxBvB,KAAKc,eACE,wBAAI/B,UAAU,SAAd,WAIP,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWsB,oBAAqBL,KAAKK,sBACrC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,OAAQa,KAAKJ,MAAMT,gB,GAtDnCgB,cCKE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLN,QAAQM,MAAMA,EAAMiD,a","file":"static/js/main.9bb7b652.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n// const Card= ({ name, email, id }) => // destructure props right inside the argument list\r\n    // <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n    //     <img src={`https://robohash.org/${id}?200x200`} alt=\"Description goes here\"/>\r\n    //     <div>\r\n    //         <h2>{name}</h2>\r\n    //         <p>{email}</p>\r\n    //     </div>\r\n    // </div>\r\n\r\n// class Card extends Component {\r\n//     render() {\r\n//         return ( // Can only return one element\r\n//             <div className='bg-light-green dib br6 pa4 ma4 grow bw4 shadow-5'>\r\n//                 <img src={`https://robohash.org/${this.props.id}?200x200`} alt=\"Description goes here\"/>\r\n//                 <div>\r\n//                     <h2>{this.props.name}</h2>\r\n//                     <p>{this.props.email}</p>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\nconst Card = ({ name, email, id }) => (\r\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img src={`https://robohash.org/${id}?200x200`} alt=\"Description goes here\"/>\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>\r\n    );\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n// class CardList extends Component {\r\n    \r\n//     render() {\r\n//         const cardArray = robots.map((robot) =>\r\n//             // If no key prop for elements generated in array => if we change some of the elements, ReactDOM won't know which one is being changed => so it will need to re-render all => not efficient, it's better to pass a key props to elements generated in an array\r\n//             <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\r\n//             );\r\n\r\n//         return <div>{cardArray /* Wrap in curly braces so that JSX knows how to evaluate it */}</div>;\r\n//     }\r\n// }\r\n\r\nconst CardList = ({ robots }) => { // Pure component = dump component\r\n    const cardArray = robots.map(robot => <Card key={robot.id} id={robot.id} email={robot.email} name={robot.name}/>);\r\n\r\n    console.log(robots);\r\n\r\n    return <div>{cardArray}</div>\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props); // allows access to this.props in the constructor\r\n\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({\r\n            hasError: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good.</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst SearchBox = ({ onSearchFieldChange }) =>\r\n    <div className='pa2'>\r\n        <input\r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type='search'\r\n            placeholder=\"search robots\"\r\n            onChange={onSearchFieldChange}\r\n            />\r\n    </div>\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = ({ children }) =>\r\n    <div style={{overflowY: 'scroll', height: 'calc(100vh - 187px)' }}>\r\n        {children}\r\n    </div>;\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from './Components/CardList';\r\nimport ErrorBoundary from './Components/ErrorBoundary';\r\nimport SearchBox from './Components/SearchBox';\r\nimport Scroll from './Components/Scroll';\r\nimport './Styles/App.css';\r\n\r\nclass App extends Component { // Smart component = stateful component\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.originalRobots = [];\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        };\r\n\r\n        this.onSearchFieldChange = this.onSearchFieldChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users') // no context, not part of react => a method on the window object -> comes with all browsers now\r\n        .then(response => {\r\n            console.log(response);\r\n            return response.json();\r\n        })\r\n        .then(users => {\r\n            this.originalRobots = users;\r\n            this.setState({ robots: users });\r\n        });\r\n        console.log('this.originalRobots', this.originalRobots);\r\n    }\r\n\r\n    onSearchFieldChange(e) { // Or can use arrow function so we don't need to bind this, value of this is determined at runtime and depends on context => tricky\r\n        const searchValue = e.target.value.toLowerCase();\r\n        let newRobots = this.originalRobots;\r\n        if (typeof(searchValue) === 'string' || searchValue instanceof String) {\r\n            if (searchValue.length > this.state.searchField.length) {\r\n                newRobots = this.state.robots;\r\n            }\r\n            if (searchValue.length > 0) {\r\n                newRobots = newRobots.filter(robot => robot.name.toLowerCase().includes(searchValue));\r\n            }\r\n        }\r\n        this.setState({\r\n            robots: newRobots,\r\n            searchField: searchValue\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.originalRobots === 0) {\r\n            return <h1 className='tc f1'>Loading</h1>;\r\n        }\r\n\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox onSearchFieldChange={this.onSearchFieldChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={this.state.robots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card'; //<-- no suffix => js file assumed\nimport App from './PanelComponent/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}